<!DOCTYPE html>
<html>
  <head>
    <title>Gmail API Send Email Example</title>
    <meta charset="utf-8" />
  </head>
  <body>
    <p>Gmail API - 메일 보내기 예제</p>

    <!-- 인증 시작 버튼 -->
    <button id="authorize_button" onclick="handleAuthClick()">Authorize</button>
    <!-- 로그아웃 버튼 -->
    <button id="signout_button" onclick="handleSignoutClick()">Sign Out</button>

    <!-- 결과 출력 영역 -->
    <pre id="content" style="white-space: pre-wrap;"></pre>

    <script type="text/javascript">
      // Google Cloud Console에서 발급받은 OAuth 클라이언트 ID
      const CLIENT_ID = '298565234749-qsj5dott56kpcushrfqc6ru3r60dmdnn.apps.googleusercontent.com';

      // Google Cloud Console에서 발급받은 API 키
      const API_KEY = 'AIzaSyAWkiFViD9lVUe0ocHOkta9HaTZ8x0vY481';

      // Gmail API를 호출하기 위한 discovery 문서 URL (API 명세서)
      const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest';

      // 메일 보내기 권한 (읽기만 아니라 쓰기 권한도 필요)
      const SCOPES = 'https://www.googleapis.com/auth/gmail.send';

      // 토큰 클라이언트 객체
      let tokenClient;

      // 구글 API 클라이언트 초기화 여부 플래그
      let gapiInited = false;
      // 구글 ID 서비스 초기화 여부 플래그
      let gisInited = false;

      // 초기에는 버튼 숨김 처리
      document.getElementById('authorize_button').style.visibility = 'hidden';
      document.getElementById('signout_button').style.visibility = 'hidden';

      // 구글 API 클라이언트 라이브러리 로드 완료 시 호출됨
      function gapiLoaded() {
        // 'client' 모듈 로드 후 초기화 함수 실행
        gapi.load('client', initializeGapiClient);
      }

      // 구글 API 클라이언트 초기화 함수
      async function initializeGapiClient() {
        await gapi.client.init({
          apiKey: API_KEY,             // 발급받은 API 키 설정
          discoveryDocs: [DISCOVERY_DOC], // Gmail API 명세서 불러오기
        });
        gapiInited = true;            // 초기화 완료 표시
        maybeEnableButtons();         // 인증 버튼 활성화 여부 판단
      }

      // Google Identity Services 라이브러리 로드 완료 시 호출됨
      function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,   // OAuth 클라이언트 ID
          scope: SCOPES,          // 요청 권한 범위 (메일 전송 권한)
          callback: '',           // 토큰 발급 후 콜백 함수는 handleAuthClick에서 설정
        });
        gisInited = true;          // 초기화 완료 표시
        maybeEnableButtons();      // 인증 버튼 활성화 여부 판단
      }

      // 구글 API 초기화 및 ID 서비스 초기화가 완료됐으면 버튼 노출
      function maybeEnableButtons() {
        if (gapiInited && gisInited) {
          document.getElementById('authorize_button').style.visibility = 'visible';
        }
      }

      // 'Authorize' 버튼 클릭 시 호출되어 OAuth 인증 진행
      function handleAuthClick() {
        // 토큰 발급 후 처리할 콜백 함수 정의
        tokenClient.callback = async (resp) => {
          if (resp.error !== undefined) {
            throw (resp);  // 에러가 있으면 예외 처리
          }
          // 인증 성공 시 로그아웃 버튼 노출, 버튼 텍스트 변경
          document.getElementById('signout_button').style.visibility = 'visible';
          document.getElementById('authorize_button').innerText = 'Refresh';

          // 메일 보내기 함수 호출
          await sendEmail(
            'lkyusang8626@gmail.com',  // 수신자 이메일 주소 (실제 이메일로 변경 필요)
            'HosDay 이메일 인증',   // 메일 제목
            `<p>안녕하세요! 아래 링크를 클릭해 이메일 인증을 완료해주세요.</p>
             <p><a href="https://hosday.kro.kr/verify?token=abc123">이메일 인증하기</a></p>` // HTML 메일 본문
          );

          // 메일 전송 완료 메시지 출력
          document.getElementById('content').innerText = '메일을 성공적으로 전송했습니다!';
        };

        // 토큰이 없으면 최초 인증 진행(계정 선택 & 권한 허용)
        if (gapi.client.getToken() === null) {
          tokenClient.requestAccessToken({ prompt: 'consent' });
        } else {
          // 토큰이 이미 있으면 재인증 없이 토큰 재사용
          tokenClient.requestAccessToken({ prompt: '' });
        }
      }

      // 'Sign Out' 버튼 클릭 시 호출되어 인증 토큰을 취소함
      function handleSignoutClick() {
        const token = gapi.client.getToken();
        if (token !== null) {
          // 토큰을 구글 계정에서 해제
          google.accounts.oauth2.revoke(token.access_token);
          gapi.client.setToken('');   // 클라이언트에 저장된 토큰 삭제
          document.getElementById('content').innerText = '';
          document.getElementById('authorize_button').innerText = 'Authorize';
          document.getElementById('signout_button').style.visibility = 'hidden';
        }
      }

      // Gmail API로 실제 메일을 전송하는 함수
      async function sendEmail(toEmail, subject, htmlContent) {
        // RFC 2822 표준 이메일 포맷 문자열 생성
        const email =
          `To: ${toEmail}\r\n` +
          `Subject: ${subject}\r\n` +
          `Content-Type: text/html; charset=UTF-8\r\n\r\n` +
          `${htmlContent}`;

        // 이메일 내용을 Base64 URL-safe 인코딩
        const base64EncodedEmail = btoa(unescape(encodeURIComponent(email)))
          .replace(/\+/g, '-')
          .replace(/\//g, '_')
          .replace(/=+$/, '');

        try {
          // Gmail API를 이용해 메일 전송 요청
          await gapi.client.gmail.users.messages.send({
            userId: 'me',            // 인증된 사용자 본인
            resource: {
              raw: base64EncodedEmail, // 인코딩된 메일 내용
            },
          });
        } catch (error) {
          // 에러 발생 시 화면과 콘솔에 출력
          document.getElementById('content').innerText = '메일 전송 실패: ' + error.message;
          console.error('메일 전송 실패:', error);
        }
      }
    </script>

    <!-- 구글 API 클라이언트 JS 로드, 로드 완료시 gapiLoaded() 호출 -->
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <!-- Google Identity Services JS 로드, 로드 완료시 gisLoaded() 호출 -->
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
  </body>
</html>
